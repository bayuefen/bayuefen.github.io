<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bayuefen的博客</title>
  <icon>https://www.gravatar.com/avatar/3dc520c17adeec1c3b627e1276124e6c</icon>
  <subtitle>玻璃晴朗，橘子辉煌</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-08-29T06:54:38.238Z</updated>
  <id>/</id>
  
  <author>
    <name>bayuefen</name>
    <email>wbushifunv555@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web 安全</title>
    <link href="/2019/06/10/web-secure/"/>
    <id>/2019/06/10/web-secure/</id>
    <published>2019-06-09T16:00:00.000Z</published>
    <updated>2019-08-29T06:54:38.238Z</updated>
    
    <content type="html"><![CDATA[<p>一些学习笔记。<br><a id="more"></a><br>基于客户端的脚本安全</p><hr><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>什么是XSS？<br>XSS是一种跨站脚本攻击。本质就是HTML注入</p><p>怎样发起XSS攻击？<br>通过HTML注入篡改网页，插入恶意脚本，从而在用户浏览网页时，控制用户浏览器的一种攻击。<br>反射型XSS:<br>构造特殊的URL里面包含恶意代码，诱使用户触发（“点击”）一个恶意链接，攻击成功。效果来讲“非持久型XSS”<br>存储型XSS:<br>恶意脚本存储在数据库（服务器端），所有访问服务器的用户都会在他们的浏览器中执行这段恶意的JavaScript代码。效果来讲存在时间较久<br>DOM Based XSS:<br>效果来说与反射型差不多，修改页面的DOM节点形成的XSS</p><p>XSS攻击手段：</p><ul><li>cookie 劫持</li><li>构造GET 与 POST 请求</li><li>钓鱼网站</li><li>识别用户的浏览器</li><li>识别用户安装的软件</li><li>通过CSS发现用户曾经访问过的网站</li><li>获取用户的真实IP地址</li></ul><p>XSS的防御：</p><ul><li>对cookie设置HttpOnly属性</li><li>对用户输入进行检查是否包含一些敏感的特殊字符</li><li>对输出、富文本、变量输出进行编码和转义</li></ul><p>如何测试XSS漏洞：<br>应用XSS攻击平台渗透测试使用（Attack API、BeEF、XSS-Proxy）</p><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>什么是CSRF？<br>CSRF是跨站点请求伪造</p><p>CSRF怎么发起攻击？<br>诱使用户在第三方站点执行了攻击者伪造的带参数的请求。<br>请求被验证通过是因为某些浏览器策略允许发送第三方cookie，或是利用P3P头的介入。<br>CSRF攻击可以用GET请求构造表单提交参数。</p><p>CSRF的防御：</p><ul><li>验证码</li><li>Anti CSRF Token（前提是token的值是随机的，且cokkie值）</li></ul><p>如何测试CSRF漏洞：</p><ul><li>抓到数据包是否带有token验证，或者还有一个固定的变量可以被控制，就会存在CSRF。</li><li>构造一个没有token，referer为空请求的post请求，成功就存在CSRF</li></ul><h3 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h3><p>什么是ClickJacking？<br>点击劫持是一种视觉欺骗手段</p><p>怎么发起ClickJacking？<br>使用一个透明的、不可见的iframe,覆盖在讴歌网页上，然后诱使用户在该网页上进行操作，通过调整iframe页面位置，点击触发一些功能性按钮。<br>浏览器的拖拽操作不受同源策略限制，运用拖拽劫持可以达到数据窃取</p><p>ClickJacking的防御：<br>使用 X-Frame-Options HTTP 响应头。<br>X-Frame-Options 有三个值:<br>DENY - 表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。<br>SAMEORIGIN - 表示该页面可以在相同域名页面的 frame 中展示。<br>ALLOW-FROM - 表示该页面可以在指定来源的 frame 中展示。</p><p>如何测试ClickJacking漏洞：<br>是否可以进行iframe嵌套</p><p>基于服务器的脚本安全</p><hr><h3 id="注入攻击"><a href="#注入攻击" class="headerlink" title="注入攻击"></a>注入攻击</h3><p>本质是用户输入的数据当做代码执行。<br>关键条件是用户能够控制输入；原本程序要执行的代码，拼接了用户输入的数据</p><p>常见的注入攻击：<br>SQL注入、XML注入、代码注入、CRLF注入</p><p>如何防御SQL注入：</p><ul><li>使用预编译语句，绑定变量</li><li>使用安全的存储过程</li><li>检查数据类型</li></ul><p>如何测试SQL注入漏洞：<br>在URL中“盲注”SQL语句,判断哪些参数存在SQL注入漏洞</p><hr><p>实际场景中攻击手段都不是单一的，往往都是同时嵌套使用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些学习笔记。&lt;br&gt;
    
    </summary>
    
    
      <category term="日记" scheme="/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="学习Vlog" scheme="/tags/%E5%AD%A6%E4%B9%A0Vlog/"/>
    
  </entry>
  
  <entry>
    <title>【Python】基于Jenkins自动化部署的环境健康检查及发布通知服务的工具实现</title>
    <link href="/2019/06/09/python-health-check-util/"/>
    <id>/2019/06/09/python-health-check-util/</id>
    <published>2019-06-09T09:20:26.000Z</published>
    <updated>2019-08-25T06:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<p>create Markdown file.<br>balabala and so on etc…</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;create Markdown file.&lt;br&gt;balabala and so on etc…&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记" scheme="/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
      <category term="jenkins" scheme="/tags/jenkins/"/>
    
      <category term="itchat" scheme="/tags/itchat/"/>
    
  </entry>
  
  <entry>
    <title>【Web安全】点击劫持</title>
    <link href="/2019/06/06/networkSecurity-web-ClickJacking/"/>
    <id>/2019/06/06/networkSecurity-web-ClickJacking/</id>
    <published>2019-06-06T03:26:51.000Z</published>
    <updated>2019-08-25T06:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<p>今天在测试前端开发项目，在生产环境的流程回归验证中，遇到了Web页面中使用<code>iframe</code>内嵌三方告知用户协议无法加载的问题。<code>Error</code>提示为<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Refused <span class="built_in">to</span> display <span class="string">'https://www.xxx.com/'</span> <span class="keyword">in</span> <span class="keyword">a</span> frame because <span class="keyword">it</span> <span class="built_in">set</span> <span class="string">'X-Frame-Options'</span> <span class="built_in">to</span> <span class="string">'sameorigin'</span>.</span><br></pre></td></tr></table></figure></p><p>这是一种经典的防范点击劫持(<em>Click Jacking</em>)的方式，通过设置HTTP请求头<code>X-Frame-Options</code>来禁止跨域<code>iframe</code>的引入。以下通过：</p><blockquote><ul><li>什么是点击劫持</li><li>点击劫持存在的Web安全隐患</li><li>如何防范点击劫持</li></ul></blockquote><p>三方面进行基本的概述与总结。</p><a id="more"></a><h4 id="一、什么是点击劫持"><a href="#一、什么是点击劫持" class="headerlink" title="一、什么是点击劫持"></a>一、什么是点击劫持</h4><p>点击劫持（ClickJacking）是一种通过视觉欺骗实现Web攻击的方式。主要的实现方式有两种：</p><blockquote><ul><li><strong>iframe引入攻击</strong>：使用透明的iframe,覆盖在一个网页上，诱导性用户进行操作，在不知情的情况下点击透明的iframe页面；</li><li><strong>图片覆盖攻击</strong>：使用图片覆盖网页，诱导用户点击；</li><li><strong>拖拽劫持与数据窃取</strong>：诱导用户从隐藏不可见<code>iframe</code>中拖拽窃取数据；</li></ul></blockquote><h5 id="iframe引入攻击"><a href="#iframe引入攻击" class="headerlink" title="iframe引入攻击"></a>iframe引入攻击</h5><p>test.html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>bayuefen-demos-clickJacking<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">     html,body,iframe&#123;</span></span><br><span class="line"><span class="undefined">         display: block;</span></span><br><span class="line"><span class="undefined">          height: 100%;</span></span><br><span class="line"><span class="undefined">          width: 100%;</span></span><br><span class="line"><span class="undefined">          margin: 0;</span></span><br><span class="line"><span class="undefined">          padding: 0;</span></span><br><span class="line"><span class="css">          <span class="selector-tag">border</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined">     iframe&#123;</span></span><br><span class="line"><span class="css">          <span class="selector-tag">opacity</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">          filter:alpha(opacity=0);</span></span><br><span class="line"><span class="css">          <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">          <span class="selector-tag">z-index</span><span class="selector-pseudo">:2</span>;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined">     button&#123;</span></span><br><span class="line"><span class="css">          <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="undefined">          top: 315px;</span></span><br><span class="line"><span class="undefined">          left: 462px;</span></span><br><span class="line"><span class="undefined">          z-index: 1;</span></span><br><span class="line"><span class="undefined">          width: 72px;</span></span><br><span class="line"><span class="undefined">          height: 26px;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span>&gt;</span>Click-Jacking-Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://www.google.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当用户试图点击test.html里button时，实际上就会点击到iframe上的区块内容。<br>本质上，通过引入<code>iframe</code>进行页面覆盖，同时设置<code>position</code>为<code>absolute</code>，通过<code>opacity</code>设置页面透明度，并将<code>z-index</code>设置到较大的值用以覆盖。<br>从而实现完成一次点击劫持攻击。当然实际的攻击过程中，伪装的模式及方法更深。点击劫持本质上和<code>CSRF</code>攻击类似，都是通过诱导式，欺骗用户完成一系列操作行为，从而达到攻击劫持的目的。</p><h5 id="图片覆盖攻击"><a href="#图片覆盖攻击" class="headerlink" title="图片覆盖攻击"></a>图片覆盖攻击</h5><p>XSIO (Cross Site Image Overlaying)是一种通过调整图片style，将图片覆盖到指定的位置，从而诱导攻击的方式.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">a</span> href=<span class="string">"http://www.google.com"</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">img</span> src=<span class="string">"IMAGE_URL"</span> style=<span class="string">"position:absolute;top:90px;left:320px;"</span> /&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后将图片伪装成正常的链接，构造一些文字吸引，欺骗用户点击，实现钓鱼的目的。</p><h5 id="拖拽劫持与数据窃取"><a href="#拖拽劫持与数据窃取" class="headerlink" title="拖拽劫持与数据窃取"></a>拖拽劫持与数据窃取</h5><p>拖拽劫持的方式是通过隐藏<code>iframe</code>中拖拽出攻击者希望得到的数据，然后放到攻击者能控制的另外一个页面中，从而窃取数据。<br>详细实现可参考国内安全研究员xisigr构造的<a href="https://book.2cto.com/201208/1996.html" target="_blank" rel="noopener">POC</a></p><h4 id="二、点击劫持存在的Web安全隐患"><a href="#二、点击劫持存在的Web安全隐患" class="headerlink" title="二、点击劫持存在的Web安全隐患"></a>二、点击劫持存在的Web安全隐患</h4><p>点击劫持存在的主要Web安全隐患，相对于<code>XSS</code>和<code>CSRF</code>攻击来说，主要是通过诱导式与页面产生交互，通过视觉欺诈的模式实施攻击行为，主要利用在钓鱼、欺诈、广告作弊等方面。<br>而如何通过有效的手段去防范点击劫持，保证相对稳定及安全的访问环境，以及在测试过程中进行相关Web安全测试的探知是必要的先决要素。</p><h4 id="三、如何防范点击劫持"><a href="#三、如何防范点击劫持" class="headerlink" title="三、如何防范点击劫持"></a>三、如何防范点击劫持</h4><p>那么，如何通过技术手段，进行点击劫持的防范。主要有以下两种方式：</p><blockquote><ul><li>frame busting: 基于JavaScript的iframe禁用嵌套</li><li>X-Frame-Options: 基于HTTP头的拒绝iframe嵌套加载设置</li></ul></blockquote><h5 id="frame-busting"><a href="#frame-busting" class="headerlink" title="frame busting"></a>frame busting</h5><p>frame busting的条件判断语句：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (<span class="name">top</span> != self)</span><br><span class="line">if (<span class="name">top</span>.location != self.location)</span><br><span class="line">if (<span class="name">top</span>.location != location)</span><br><span class="line">if (<span class="name">parent</span>.frames.length &gt; <span class="number">0</span>)</span><br><span class="line">if (<span class="name">window</span> != top)</span><br><span class="line">if (<span class="name">window</span>.top !== window.self)</span><br><span class="line">if (<span class="name">window</span>.self != window.top)</span><br><span class="line">if (<span class="name">parent</span> <span class="symbol">&amp;&amp;</span> parent != window)</span><br><span class="line">if (<span class="name">parent</span> <span class="symbol">&amp;&amp;</span> parent.frames <span class="symbol">&amp;&amp;</span> parent.frames.length&gt;0)</span><br><span class="line">if((<span class="name">self</span>.parent&amp;&amp;!(<span class="name">self</span>.parent===self))<span class="symbol">&amp;&amp;</span>(<span class="name">self</span>.parent.frames.length!=0))</span><br></pre></td></tr></table></figure></p><p>frame busting 的纠正动作代码:<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">top.<span class="keyword">location</span> <span class="title">= self</span>.location</span><br><span class="line">top.location.href = document.location.href</span><br><span class="line">top.location.href = self.location.href</span><br><span class="line">top.location.replace(self.location)</span><br><span class="line">top.location.href = window.location.href</span><br><span class="line">top.location.replace(document.location)</span><br><span class="line">top.location.href = window.location.href</span><br><span class="line">top.location.href = <span class="string">"URL"</span></span><br><span class="line">document.<span class="keyword">write</span>('')</span><br><span class="line">top.<span class="keyword">location</span> <span class="title">= location</span></span><br><span class="line">top.location.replace(document.location)</span><br><span class="line">top.location.replace('URL')</span><br><span class="line">top.location.href = document.location</span><br><span class="line">top.location.replace(window.location.href)</span><br><span class="line">top.location.href = location.href</span><br><span class="line">self.parent.<span class="keyword">location</span> <span class="title">= document</span>.location</span><br><span class="line">parent.location.href = self.document.location</span><br><span class="line">top.location.href = self.location</span><br><span class="line">top.<span class="keyword">location</span> <span class="title">= window</span>.location</span><br><span class="line">top.location.replace(window.location.pathname)</span><br><span class="line">window.top.<span class="keyword">location</span> <span class="title">= window</span>.self.location</span><br><span class="line">setTimeout(function()&#123;document.body.<span class="attr">innerHTML=</span>'';&#125;,<span class="number">1</span>);</span><br><span class="line">window.self.onload = function(evt)&#123;document.body.<span class="attr">innerHTML=</span>'';&#125;</span><br><span class="line">var url = window.location.href; top.location.replace(url)</span><br></pre></td></tr></table></figure></p><h5 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h5><p>X-Frame-Options 有三个值:</p><blockquote><ul><li>DENY: 表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。</li><li>SAMEORIGIN: 表示该页面可以在相同域名页面的 frame 中展示。</li><li>ALLOW-FROM uri: 表示该页面可以在指定来源的 frame 中展示。</li></ul></blockquote><p>涉及<code>Apache</code>、<code>Nginx</code>、<code>IIS</code>对于相应头的配置，详情查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options" target="_blank" rel="noopener">MDN</a></p><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p>1.<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options" target="_blank" rel="noopener">X-Frame-Options 响应头</a><br>2.<a href="https://www.cnblogs.com/LittleHann/p/3386055.html" target="_blank" rel="noopener">Busting Frame Busting</a><br>3.<a href="https://www.cnblogs.com/xuanhun/p/3610981.html" target="_blank" rel="noopener">Web应用安全之点击劫持（CLICKJACKING）与X-FRAME-OPTIONS HEADER</a><br>4.<a href="https://book.2cto.com/201208/1996.html" target="_blank" rel="noopener">拖拽劫持与数据窃取</a><br>5.<a href="https://book.douban.com/subject/10546925" target="_blank" rel="noopener">白帽子讲Web安全</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在测试前端开发项目，在生产环境的流程回归验证中，遇到了Web页面中使用&lt;code&gt;iframe&lt;/code&gt;内嵌三方告知用户协议无法加载的问题。&lt;code&gt;Error&lt;/code&gt;提示为&lt;br&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Refused &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; display &lt;span class=&quot;string&quot;&gt;&#39;https://www.xxx.com/&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; frame because &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;X-Frame-Options&#39;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;sameorigin&#39;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是一种经典的防范点击劫持(&lt;em&gt;Click Jacking&lt;/em&gt;)的方式，通过设置HTTP请求头&lt;code&gt;X-Frame-Options&lt;/code&gt;来禁止跨域&lt;code&gt;iframe&lt;/code&gt;的引入。以下通过：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;什么是点击劫持&lt;/li&gt;
&lt;li&gt;点击劫持存在的Web安全隐患&lt;/li&gt;
&lt;li&gt;如何防范点击劫持&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;三方面进行基本的概述与总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记" scheme="/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="Web安全" scheme="/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Generate SSH key and How deploy it</title>
    <link href="/2019/05/29/ssh-generate-SSH-key-and-deploy-it/"/>
    <id>/2019/05/29/ssh-generate-SSH-key-and-deploy-it/</id>
    <published>2019-05-29T11:21:12.000Z</published>
    <updated>2019-08-25T06:35:47.233Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h4><p>Git is a distributed version control system, which means you can work locally but you can also share or “push” your changes to other servers. Before you can push your changes to a GitLab server you need a secure communication channel for sharing information.</p><a id="more"></a><p>The SSH protocol provides this security and allows you to authenticate to the GitLab remote server without supplying your username or password each time.</p><p>For a more detailed explanation of how the SSH protocol works, we advise you to read <a href="https://www.digitalocean.com/community/tutorials/understanding-the-ssh-encryption-and-connection-process" target="_blank" rel="noopener">this nice tutorial by DigitalOcean</a>.</p><h4 id="Locating-an-existing-SSH-key-pair"><a href="#Locating-an-existing-SSH-key-pair" class="headerlink" title="Locating an existing SSH key pair"></a>Locating an existing SSH key pair</h4><p>Before generating a new SSH key check if your system already has one at the default location by opening a shell, or Command Prompt on Windows, and running the following command:</p><h6 id="Windows-Command-Prompt"><a href="#Windows-Command-Prompt" class="headerlink" title="Windows Command Prompt:"></a>Windows Command Prompt:</h6><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type <span class="variable">%userprofile%</span><span class="symbol">\.</span>ssh<span class="symbol">\i</span>d_rsa.pub</span><br></pre></td></tr></table></figure><h6 id="GNU-Linux-macOS-PowerShell"><a href="#GNU-Linux-macOS-PowerShell" class="headerlink" title="GNU/Linux / macOS / PowerShell:"></a>GNU/Linux / macOS / PowerShell:</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure><p>If you see a string starting with <code>ssh-rsa</code> you already have an SSH key pair and you can skip the next step <strong>Generating a new SSH key pair</strong> and continue onto <strong>Copying your public SSH key to the clipboard</strong>.<br>If you don’t see the string or would like to generate a SSH key pair with a custom name continue onto the next step.</p><h4 id="Generating-a-new-SSH-key-pair"><a href="#Generating-a-new-SSH-key-pair" class="headerlink" title="Generating a new SSH key pair"></a>Generating a new SSH key pair</h4><h5 id="1-To-generate-a-new-SSH-key-use-the-following-command"><a href="#1-To-generate-a-new-SSH-key-use-the-following-command" class="headerlink" title="1. To generate a new SSH key, use the following command:"></a>1. To generate a new SSH key, use the following command:</h5><h6 id="GNU-Linux-macOS"><a href="#GNU-Linux-macOS" class="headerlink" title="GNU/Linux / macOS:"></a>GNU/Linux / macOS:</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"GitLab"</span> -<span class="selector-tag">b</span> <span class="number">4096</span></span><br></pre></td></tr></table></figure><h6 id="Windows"><a href="#Windows" class="headerlink" title="Windows:"></a>Windows:</h6><p>On Windows you will need to download <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" target="_blank" rel="noopener">PuttyGen</a> and follow this <a href="https://the.earth.li/~sgtatham/putty/0.67/htmldoc/Chapter8.html#pubkey-puttygen" target="_blank" rel="noopener">documentation article</a> to generate a SSH key pair.</p><h5 id="2-Next-you-will-be-prompted-to-input-a-file-path-to-save-your-key-pair-to"><a href="#2-Next-you-will-be-prompted-to-input-a-file-path-to-save-your-key-pair-to" class="headerlink" title="2. Next, you will be prompted to input a file path to save your key pair to."></a>2. Next, you will be prompted to input a file path to save your key pair to.</h5><p>If you don’t already have an SSH key pair use the suggested path by pressing enter. Using the suggested path will allow your SSH client to automatically use the key pair with no additional configuration.</p><p>If you already have a key pair with the suggested file path, you will need to input a new file path and declare what host this key pair will be used for in your <code>.ssh/config</code> file, see <strong>Working with non-default SSH key pair paths</strong> for more information.</p><h5 id="3-Once-you-have-input-a-file-path-you-will-be-prompted-to-input-a-password-to-secure-your-SSH-key-pair-It-is-a-best-practice-to-use-a-password-for-an-SSH-key-pair-but-it-is-not-required-and-you-can-skip-creating-a-password-by-pressing-enter"><a href="#3-Once-you-have-input-a-file-path-you-will-be-prompted-to-input-a-password-to-secure-your-SSH-key-pair-It-is-a-best-practice-to-use-a-password-for-an-SSH-key-pair-but-it-is-not-required-and-you-can-skip-creating-a-password-by-pressing-enter" class="headerlink" title="3. Once you have input a file path you will be prompted to input a password to secure your SSH key pair. It is a best practice to use a password for an SSH key pair, but it is not required and you can skip creating a password by pressing enter."></a>3. Once you have input a file path you will be prompted to input a password to secure your SSH key pair. It is a best practice to use a password for an SSH key pair, but it is not required and you can skip creating a password by pressing enter.</h5><blockquote><ul><li>Note: If you want to change the password of your key, you can use <code>ssh-keygen -p &lt;keyname&gt;</code>.</li></ul></blockquote><h5 id="4-The-next-step-is-to-copy-the-public-key-as-we-will-need-it-afterwards-To-copy-your-public-key-to-the-clipboard-use-the-appropriate-code-for-your-operating-system-below"><a href="#4-The-next-step-is-to-copy-the-public-key-as-we-will-need-it-afterwards-To-copy-your-public-key-to-the-clipboard-use-the-appropriate-code-for-your-operating-system-below" class="headerlink" title="4. The next step is to copy the public key as we will need it afterwards. To copy your public key to the clipboard, use the appropriate code for your operating system below:"></a>4. The next step is to copy the public key as we will need it afterwards. To copy your public key to the clipboard, use the appropriate code for your operating system below:</h5><h6 id="macOS"><a href="#macOS" class="headerlink" title="macOS:"></a>macOS:</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pbcopy &lt; ~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure><h6 id="GNU-Linux-requires-the-xclip-package"><a href="#GNU-Linux-requires-the-xclip-package" class="headerlink" title="GNU/Linux (requires the xclip package):"></a>GNU/Linux (requires the xclip package):</h6><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">xclip</span> -<span class="keyword">sel </span>clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h6 id="Windows-Command-Line"><a href="#Windows-Command-Line" class="headerlink" title="Windows Command Line:"></a>Windows Command Line:</h6><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type %userprofile%\.ssh\id_rsa.pub | <span class="keyword">clip</span></span><br></pre></td></tr></table></figure><h6 id="Windows-PowerShell"><a href="#Windows-PowerShell" class="headerlink" title="Windows PowerShell:"></a>Windows PowerShell:</h6><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> ~/.ssh/id_rsa.pub | <span class="built_in">clip</span></span><br></pre></td></tr></table></figure><h5 id="5-The-final-step-is-to-add-your-public-SSH-key-to-GitLab"><a href="#5-The-final-step-is-to-add-your-public-SSH-key-to-GitLab" class="headerlink" title="5. The final step is to add your public SSH key to GitLab."></a>5. The final step is to add your public SSH key to GitLab.</h5><p>Navigate to the ‘SSH Keys’ tab in you ‘Profile Settings’. Paste your key in the ‘Key’ section and give it a relevant ‘Title’. Use an identifiable title like ‘Work Laptop - Windows 7’ or ‘Home MacBook Pro 15’.</p><p>If you manually copied your public SSH key make sure you copied the entire key starting with <code>ssh-rsa</code> and ending with your email.</p><h4 id="Working-with-non-default-SSH-key-pair-paths"><a href="#Working-with-non-default-SSH-key-pair-paths" class="headerlink" title="Working with non-default SSH key pair paths"></a>Working with non-default SSH key pair paths</h4><p>If you used a non-default file path for your GitLab SSH key pair, you must configure your SSH client to find your GitLab SSH private key for connections to your GitLab server (perhaps gitlab.com).</p><p>For OpenSSH clients this is configured in the <code>~/.ssh/config file</code>.Below are two example host configurations using their own key:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GitLab.com server</span></span><br><span class="line"><span class="string">Host</span> <span class="string">gitlab.com</span></span><br><span class="line"><span class="string">RSAAuthentication</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">IdentityFile</span> <span class="string">~/.ssh/config/private-key-filename-01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Private GitLab server</span></span><br><span class="line"><span class="string">Host</span> <span class="string">gitlab.company.com</span></span><br><span class="line"><span class="string">RSAAuthentication</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">IdentityFile</span> <span class="string">~/.ssh/config/private-key-filename</span></span><br></pre></td></tr></table></figure></p><p>Due to the wide variety of SSH clients and their very large number of configuration options, further explanation of these topics is beyond the scope of this document.</p><p>Public SSH keys need to be unique, as they will bind to your account. Your SSH key is the only identifier you’ll have when pushing code via SSH. That’s why it needs to uniquely map to a single user.</p><h4 id="Deploy-keys"><a href="#Deploy-keys" class="headerlink" title="Deploy keys"></a>Deploy keys</h4><p>Deploy keys allow read-only access to multiple projects with a single SSH key.</p><p>This is really useful for cloning repositories to your Continuous Integration (CI) server. By using deploy keys, you don’t have to setup a dummy user account.</p><p>If you are a project master or owner, you can add a deploy key in the project settings under the section ‘Deploy Keys’. Press the ‘New Deploy Key’ button and upload a public SSH key. After this, the machine that uses the corresponding private key has read-only access to the project.</p><p>You can’t add the same deploy key twice with the ‘New Deploy Key’ option. If you want to add the same key to another project, please enable it in the list that says ‘Deploy keys from projects available to you’. All the deploy keys of all the projects you have access to are available. This project access can happen through being a direct member of the project, or through a group.</p><p>Deploy keys can be shared between projects, you just need to add them to each project.</p><h4 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h4><h5 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h5><p>How to add your ssh key to Eclipse: <a href="https://wiki.eclipse.org/EGit/User_Guide#Eclipse_SSH_Configuration" target="_blank" rel="noopener">https://wiki.eclipse.org/EGit/User_Guide#Eclipse_SSH_Configuration</a></p><p>Ps: copyright belongs to gitlab.com</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;SSH&quot;&gt;&lt;a href=&quot;#SSH&quot; class=&quot;headerlink&quot; title=&quot;SSH&quot;&gt;&lt;/a&gt;SSH&lt;/h4&gt;&lt;p&gt;Git is a distributed version control system, which means you can work locally but you can also share or “push” your changes to other servers. Before you can push your changes to a GitLab server you need a secure communication channel for sharing information.&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="/tags/git/"/>
    
      <category term="日记" scheme="/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="SSH" scheme="/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Git版本控制基础应用</title>
    <link href="/2019/05/16/git-version-control-basics/"/>
    <id>/2019/05/16/git-version-control-basics/</id>
    <published>2019-05-16T06:26:15.000Z</published>
    <updated>2019-08-25T06:35:47.231Z</updated>
    
    <content type="html"><![CDATA[<p>过去的一系列产品开发过程中，版本控制大多集中于svn的应用，对于git相对较为生疏。现阶段在开发一款企业级多系统应用过程中，对产品的版本分割、迭代有较强的前置需求，需要我自行维护构建一整套多版本的开发源码，因此借助公司内部已有gitlab平台做出基本尝试。<br>此文主要是用以记录采用git这一整套分布式版本控制系统过程中所归纳总结的一系列命令行、Repository、Branches等管理应用心得及踩坑之处。</p><a id="more"></a><h4 id="一、Git简介"><a href="#一、Git简介" class="headerlink" title="一、Git简介"></a>一、Git简介</h4><p>分布式版本控制系统和集中式版本控制系统对于数据存储、安全性、文件流管理等各方面各有优异，以下仅对分布式版本控制系统做基本的优劣性总结。</p><blockquote><ul><li>git大部分系统以文件变更列表的方式存储信息，把存储数据看做对小型文件系统的一组快照流。</li><li>git绝大多数的操作只需要访问本地文件和资源，本次磁盘即保存着项目的完整历史，因此执行速度非常快。</li><li>git文件状态主要有：已提交(committed)、已修改(modified)、已暂存(staged)三种。对应的工作区域也有Git仓库、工作目录以及暂存区域三种。</li><li>git的工作流程：在工作目录中修改文件 -&gt; 暂存文件，将文件的快照放入暂存区域 -&gt; 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录</li><li>git存在较为明显的缺点，代码的保密性差，仓库保存着所有的代码和版本信息。</li></ul></blockquote><h4 id="二、Git安装及配置"><a href="#二、Git安装及配置" class="headerlink" title="二、Git安装及配置"></a>二、Git安装及配置</h4><p>基于Mac OS X的Git安装</p><h6 id="1-使用homebrew安装git-homebrew"><a href="#1-使用homebrew安装git-homebrew" class="headerlink" title="1.使用homebrew安装git (homebrew)"></a>1.使用homebrew安装git (<a href="https://brew.sh/" target="_blank" rel="noopener">homebrew</a>)</h6><p>Homebrew安装<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/<span class="keyword">install</span>/<span class="keyword">master</span>/<span class="keyword">install</span>)<span class="string">"</span></span><br></pre></td></tr></table></figure></p><p>使用homebrew安装git<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>git</span><br></pre></td></tr></table></figure></p><h6 id="2-基于OSX-Git安装程序安装（https-git-scm-com-download-mac）"><a href="#2-基于OSX-Git安装程序安装（https-git-scm-com-download-mac）" class="headerlink" title="2.基于OSX Git安装程序安装（https://git-scm.com/download/mac）"></a>2.基于OSX Git安装程序安装（<a href="https://git-scm.com/download/mac" target="_blank" rel="noopener">https://git-scm.com/download/mac</a>）</h6><h6 id="3-基于图形化工具GitHub-for-Mac工具安装（https-desktop-github-com-）"><a href="#3-基于图形化工具GitHub-for-Mac工具安装（https-desktop-github-com-）" class="headerlink" title="3.基于图形化工具GitHub for Mac工具安装（https://desktop.github.com/）"></a>3.基于图形化工具GitHub for Mac工具安装（<a href="https://desktop.github.com/" target="_blank" rel="noopener">https://desktop.github.com/</a>）</h6><h4 id="三、Git基本配置"><a href="#三、Git基本配置" class="headerlink" title="三、Git基本配置"></a>三、Git基本配置</h4><p>检查配置信息<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--list</span><br></pre></td></tr></table></figure></p><p>用户信息配置<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"bayuefen"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email wobushifunv555@163.com</span><br></pre></td></tr></table></figure></p><h4 id="四、命令使用"><a href="#四、命令使用" class="headerlink" title="四、命令使用"></a>四、命令使用</h4><h6 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h6><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">初始化操作：git init</span><br><span class="line">克隆仓库：git clone [url] <span class="symbol">&lt;name&gt;</span></span><br><span class="line">查看文件状态：git status</span><br><span class="line">对比文件暂存：git diff</span><br><span class="line">移除文件：git rm [<span class="keyword">file</span>]</span><br><span class="line">查看历史提交记录：git <span class="built_in">log</span></span><br><span class="line">取消暂存文件：git reset HEAD <span class="symbol">&lt;file&gt;</span></span><br><span class="line">查看远程仓库：git remote -v</span><br><span class="line">冲突合并：git mergetool (可以使用opendiff等三方合并工具)</span><br><span class="line">查看分支：git branch</span><br><span class="line">创建分支：git branch <span class="symbol">&lt;name&gt;</span></span><br><span class="line">切换分支：git checkout <span class="symbol">&lt;name&gt;</span></span><br><span class="line">创建并切换到该分支：git checkout -<span class="keyword">b</span> <span class="symbol">&lt;name&gt;</span></span><br><span class="line">合并某分支到当前分支：git merge <span class="symbol">&lt;name&gt;</span></span><br><span class="line">删除当前分支：git branch -d <span class="symbol">&lt;name&gt;</span></span><br><span class="line">提交改动记录： git commit -<span class="keyword">m</span> <span class="string">"changed records"</span></span><br><span class="line">查看标签：git <span class="keyword">tag</span></span><br><span class="line">添加标签：git <span class="keyword">tag</span> -<span class="keyword">a</span> [<span class="keyword">version</span>] -<span class="keyword">m</span> [version_name]</span><br><span class="line">信息查看：git show</span><br></pre></td></tr></table></figure><h6 id="拉取已有分支、开发并提交的基本流程"><a href="#拉取已有分支、开发并提交的基本流程" class="headerlink" title="拉取已有分支、开发并提交的基本流程"></a>拉取已有分支、开发并提交的基本流程</h6><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">克隆现有repository：git clone domain/Project.git</span><br><span class="line">切换至开发<span class="keyword">branch：git </span>checkout &lt;<span class="keyword">branch_name&gt;</span></span><br><span class="line"><span class="keyword">blingbling的苦逼工作：coding </span>work...</span><br><span class="line">分支整合：git pull</span><br><span class="line">文件版本控制新增：git <span class="keyword">add </span>./</span><br><span class="line">提交改动至分支：git commit -m &lt;commit_record&gt;</span><br><span class="line">推送改动至分支：git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><h6 id="合并分支到master"><a href="#合并分支到master" class="headerlink" title="合并分支到master"></a>合并分支到master</h6><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">切换至<span class="literal">master</span>分支：git checkout <span class="literal">master</span></span><br><span class="line">远程分支整合：git pull origin <span class="literal">master</span></span><br><span class="line">合并分支至<span class="literal">master</span>：git merge <span class="tag">&lt;branch&gt;</span></span><br><span class="line">查看状态：git status</span><br><span class="line">推送分支内容至<span class="literal">master</span>：git push origin <span class="literal">master</span></span><br></pre></td></tr></table></figure><h4 id="五、References"><a href="#五、References" class="headerlink" title="五、References"></a>五、References</h4><p>1.<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a><br>2.<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro Git</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过去的一系列产品开发过程中，版本控制大多集中于svn的应用，对于git相对较为生疏。现阶段在开发一款企业级多系统应用过程中，对产品的版本分割、迭代有较强的前置需求，需要我自行维护构建一整套多版本的开发源码，因此借助公司内部已有gitlab平台做出基本尝试。&lt;br&gt;此文主要是用以记录采用git这一整套分布式版本控制系统过程中所归纳总结的一系列命令行、Repository、Branches等管理应用心得及踩坑之处。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="/tags/git/"/>
    
      <category term="日记" scheme="/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="版本控制" scheme="/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>【Python】基础教程学习记录</title>
    <link href="/2019/04/23/python-tutorial-record/"/>
    <id>/2019/04/23/python-tutorial-record/</id>
    <published>2019-04-23T08:35:57.000Z</published>
    <updated>2019-08-25T06:35:47.233Z</updated>
    
    <content type="html"><![CDATA[<p>本文核心记录在<code>Python</code>基础知识与进阶教程学习过程中的一些零碎知识记录，主要用于基础知识的巩固，以便后续使用<code>Python</code>过程遇到疑问参照。<br><a id="more"></a></p><p>## </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文核心记录在&lt;code&gt;Python&lt;/code&gt;基础知识与进阶教程学习过程中的一些零碎知识记录，主要用于基础知识的巩固，以便后续使用&lt;code&gt;Python&lt;/code&gt;过程遇到疑问参照。&lt;br&gt;
    
    </summary>
    
    
      <category term="日记" scheme="/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>【Server】基于Node及MongoDB的服务配置与部署</title>
    <link href="/2019/04/19/node-server-deploy/"/>
    <id>/2019/04/19/node-server-deploy/</id>
    <published>2019-04-19T02:52:36.000Z</published>
    <updated>2019-08-25T06:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<p>在过去几天的调研参考之后，拟定<em>Fork</em>Github相关的repositories，构建整站解决方案。</p><ul><li>后端服务基于<a href="https://github.com/bayuefen/node-elm" target="_blank" rel="noopener">node-elm</a></li><li>数据库采用<a href="https://www.mongodb.com/" target="_blank" rel="noopener">MongoDB</a></li><li>商户系统Web服务基于<a href="https://github.com/bayuefen/vue2-manage" target="_blank" rel="noopener">vue2-manage</a></li><li>用户系统Web服务基于<a href="https://github.com/bayuefen/vue2-elm" target="_blank" rel="noopener">vue2-elm</a></li></ul><p>本文主要根据Node及MongoDB，在服务配置与部署过程中所遇到的一些问题的解决方案进行总结。</p><a id="more"></a><h3 id="Node-Server-install"><a href="#Node-Server-install" class="headerlink" title="Node Server install"></a>Node Server install</h3><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>1、node (6.0 及以上版本)<br>2、mongodb (开启状态)<br>3、GraphicsMagick (裁切图片)<br>4、yarn/npm(Node packages管理)<br>5、pm2(守护进程)</p><h4 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/bayuefen/<span class="keyword">node</span><span class="title">-elm</span>  </span><br><span class="line"></span><br><span class="line">cd <span class="keyword">node</span><span class="title">-elm</span></span><br><span class="line"></span><br><span class="line">yarn install / npm install</span><br><span class="line"></span><br><span class="line">yarn run dev</span><br></pre></td></tr></table></figure><p>访问: <code>http://localhost:8001</code>（如果已启动前台程序，则不需打开此地址）<br>本人将<code>node-elm</code>工程项目clone至阿里云ECS上，安装好上述环境依赖及node packages后，使用pm2守护进程<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p<span class="name">m2</span> start <span class="string">'yarn run dev'</span></span><br></pre></td></tr></table></figure></p><h3 id="MongoDB-Community-Edition-install-rpm-Packages"><a href="#MongoDB-Community-Edition-install-rpm-Packages" class="headerlink" title="MongoDB Community Edition install(.rpm Packages)"></a>MongoDB Community Edition install(.rpm Packages)</h3><h4 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h4><p>1、创建<code>/etc/yum.repos.d/mongodb-org-4.2.repo</code>文件;<br>2、写入<code>yum</code>安装配置信息<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mongodb-org-4.2]</span></span><br><span class="line"><span class="attr">name</span>=MongoDB Repository</span><br><span class="line"><span class="attr">baseurl</span>=https://repo.mongodb.org/yum/redhat/<span class="variable">$releasever</span>/mongodb-org/<span class="number">4.1</span>/x<span class="number">86_64</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=https://www.mongodb.org/static/pgp/server-<span class="number">4.2</span>.asc</span><br></pre></td></tr></table></figure></p><p>3、安装MongoDB packages<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> -y mongodb-org-unstable</span><br></pre></td></tr></table></figure></p><p>4、!特定版本packages及组件安装<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">yum</span> <span class="selector-tag">install</span> <span class="selector-tag">-y</span> <span class="selector-tag">mongodb-org-unstable-4</span><span class="selector-class">.1</span><span class="selector-class">.10</span> <span class="selector-tag">mongodb-org-unstable-server-4</span><span class="selector-class">.1</span><span class="selector-class">.10</span> <span class="selector-tag">mongodb-org-unstable-shell-4</span><span class="selector-class">.1</span><span class="selector-class">.10</span> <span class="selector-tag">mongodb-org-unstable-mongos-4</span><span class="selector-class">.1</span><span class="selector-class">.10</span> <span class="selector-tag">mongodb-org-unstable-tools-4</span><span class="selector-class">.1</span><span class="selector-class">.10</span></span><br></pre></td></tr></table></figure></p><h4 id="启用流程"><a href="#启用流程" class="headerlink" title="启用流程"></a>启用流程</h4><p>1、MongoDB默认文件创建</p><ul><li>/var/lib/mongo (the data directory)</li><li>/var/log/mongodb (the log directory)</li></ul><p>2、启用MongoDB<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>mongod start</span><br></pre></td></tr></table></figure></p><p>3、验证启用是否成功<br><code>27017</code>是默认端口，可以在<code>/etc/mongod.conf</code>中更改。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chkconfig mongod <span class="keyword">on</span></span><br></pre></td></tr></table></figure></p><p>4、关闭MongoDB<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>mongod stop</span><br></pre></td></tr></table></figure></p><p>5、重启MongoDB<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>mongod restart</span><br></pre></td></tr></table></figure></p><p>6、MongoDB使用<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mongo</span></span><br></pre></td></tr></table></figure></p><h4 id="MongoDB权限配置"><a href="#MongoDB权限配置" class="headerlink" title="MongoDB权限配置"></a>MongoDB权限配置</h4><p>默认安装的MongoDB是不具备权限验证的，因为需要通过Navicat访问远程ECS上的DB服务，为了安全起见，给MongoDB配置相应的权限验证机制是非常必要的。</p><h5 id="超级管理员创建"><a href="#超级管理员创建" class="headerlink" title="超级管理员创建"></a>超级管理员创建</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用mongoDB后使用</span></span><br><span class="line">mongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换至超级管理员模式</span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建超级管理员</span></span><br><span class="line">db.createUser(&#123;<span class="keyword">user</span>:<span class="string">'userName'</span>, pwd:<span class="string">'password'</span>, <span class="keyword">roles</span>:[<span class="string">'userAdminAnyDatabase'</span>]&#125;)</span><br></pre></td></tr></table></figure><p>role类型:</p><ul><li>readAnyDatabase 任何数据库的只读权限(和read相似)</li><li>readWriteAnyDatabase 任何数据库的读写权限(和readWrite相似)</li><li>userAdminAnyDatabase 任何数据库用户的管理权限(和userAdmin相似)</li><li>dbAdminAnyDatabase 任何数据库的管理权限(dbAdmin相似)</li></ul><h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入超级管理员模式并验证</span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">admin</span></span><br><span class="line"></span><br><span class="line">db.auth(<span class="string">'userName'</span>,<span class="string">'password'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据库</span></span><br><span class="line"><span class="keyword">show</span> dbs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到elm数据库</span></span><br><span class="line"><span class="keyword">show</span> elm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建elm数据库用户</span></span><br><span class="line">db.createUser(&#123;<span class="keyword">user</span>:<span class="string">'user-bayuefen'</span>,pwd:<span class="string">'password'</span>,<span class="keyword">roles</span>:[&#123;<span class="keyword">role</span>:<span class="string">'readWrite'</span>,db:<span class="string">'elm'</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure><p>以上步骤核心完成超级管理员的创建验证及单个数据库的用户创建。<br>具备了以上的权限配置，我们即可通过navicat进行数据库的查看与管理；同时，在<code>Node</code>服务中我们可以使用<code>mongoose</code> package对数据库进行CURD</p><h6 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h6><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mongoose <span class="keyword">from</span> <span class="string">'mongoose'</span>;</span><br><span class="line">mongoose.connect(<span class="string">'mongodb://user:pwd@localhost:27017/elm'</span>, &#123;useMongoClient:<span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure><h6 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server: ECS ip</span><br><span class="line">port: 27017 (default)</span><br><span class="line">user: user</span><br><span class="line">pwd: password</span><br><span class="line">db: db_name</span><br></pre></td></tr></table></figure><p>ps:ECS需要通过阿里云后台服务打开安全策略中的27017端口的外网访问权限</p><h4 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h4><p>Q:MongoDB在配置权限之后，重启Mongo,无法启动服务。抛<code>Unit mongod.service entered failed state.</code>异常<br>A:排查后，发现Centos需要将MongoDB添加至<code>systemd</code>中，否则会出现问题。<a href="https://github.com/jingxinxin/tiankeng/issues/5" target="_blank" rel="noopener">Issues</a><br>添加<code>systemd</code><br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">mongod</span>.<span class="title">service</span></span></span><br></pre></td></tr></table></figure></p><blockquote><p>[Unit]<br>Description=mongodb database</p><p>[Service]<br>User=mongod<br>Group=mongod<br>Environment=”OPTIONS=–quiet -f /etc/mongod.conf”<br>ExecStart=/usr/bin/mongod $OPTIONS run<br>PIDFile=/var/run/mongodb/mongod.pid</p><p>[Install]<br>WantedBy=multi-user.target</p></blockquote><p>创建链接：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">mongod</span>.<span class="title">service</span> /<span class="title">etc</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">multi</span>-<span class="title">user</span>.<span class="title">target</span>.<span class="title">wants</span>/</span></span><br></pre></td></tr></table></figure></p><p>重新加载systemctl<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl daemon-reload</span></span><br></pre></td></tr></table></figure></p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="https://docs.mongodb.com/master/tutorial/install-mongodb-on-red-hat/#to-use-non-default-directories" target="_blank" rel="noopener">Centos7</a></li><li><a href="https://docs.mongodb.com/master/tutorial/install-mongodb-on-os-x/" target="_blank" rel="noopener">macOS</a></li><li><a href="https://docs.mongodb.com/master/tutorial/install-mongodb-on-windows/" target="_blank" rel="noopener">Windows</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在过去几天的调研参考之后，拟定&lt;em&gt;Fork&lt;/em&gt;Github相关的repositories，构建整站解决方案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;后端服务基于&lt;a href=&quot;https://github.com/bayuefen/node-elm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node-elm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;数据库采用&lt;a href=&quot;https://www.mongodb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;商户系统Web服务基于&lt;a href=&quot;https://github.com/bayuefen/vue2-manage&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue2-manage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用户系统Web服务基于&lt;a href=&quot;https://github.com/bayuefen/vue2-elm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue2-elm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文主要根据Node及MongoDB，在服务配置与部署过程中所遇到的一些问题的解决方案进行总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记" scheme="/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="Node" scheme="/tags/Node/"/>
    
      <category term="MongoDB" scheme="/tags/MongoDB/"/>
    
      <category term="服务部署" scheme="/tags/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>【Python】标准库unittest基本应用</title>
    <link href="/2019/04/17/python-lib-unittest/"/>
    <id>/2019/04/17/python-lib-unittest/</id>
    <published>2019-04-17T09:36:29.000Z</published>
    <updated>2019-08-25T06:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.python.org/3.7/library/unittest.html" target="_blank" rel="noopener"><code>unittest</code></a>的入门基本应用记录。</p><p>概念<br><code>unittest</code>是<code>python</code>自带的标准库之一，是<code>python</code>版的<code>junit</code>，主要用于维护执行自动化测试框架的用例。</p><a id="more"></a><h2 id="核心工作原理"><a href="#核心工作原理" class="headerlink" title="核心工作原理"></a>核心工作原理</h2><p>核心应有有：<code>TestCase</code> <code>TestSuite</code> <code>TestLoader</code> <code>TestRunner</code> <code>TestFixture</code> 等构造函数。</p><ul><li><code>TestCase</code>: 测试用例。一个完整的测试单元包括 测试前准备环境的搭建(<code>setUp</code>)，执行测试代码(<code>run</code>)，以及测试后环境的还原(<code>tearDown</code>)。一系列具有完整测试流程的测试单元组成测试用例。</li><li><code>TestSuite</code>: 测试用例合集。多个<code>TestCase</code>集合组成<code>TestSuite</code>。且<code>TestSuite</code>可以嵌套其他<code>TestSuite</code>。</li><li><code>TestLoader</code>: 测试用例装载器。主要用于加载<code>TestCase</code>值<code>TestSuite</code>。通过<code>loadTestsFrom__()</code>方法加载<code>TestCase</code>，并创建其实例，然后将该实例添加至<code>TestSuite</code>中，返回<code>TestSuite</code>实例。</li><li><code>TestRunner</code>: 测试用例执行器。执行器中的<code>run(test)</code>方法会自动执行<code>TestCase</code>、<code>TestSuite</code>中的<code>run(result)</code>方法，并将执行的测试结果保存至<code>TextTestResult</code>实例中，用于统计测试用例执行结果合计。</li><li><code>TestFixture</code>: 测试环境构建与销毁维护。在测试用例运行初始化前使用<code>setUp()</code>准备初始环境，在测试用例执行完毕后使用<code>tearDown()</code>执行销毁，还原运行测试环境。</li></ul><p>参考链接</p><p><a href="https://blog.csdn.net/luanpeng825485697/article/details/79459771" target="_blank" rel="noopener">https://blog.csdn.net/luanpeng825485697/article/details/79459771</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3.7/library/unittest.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt;的入门基本应用记录。&lt;/p&gt;
&lt;p&gt;概念&lt;br&gt;&lt;code&gt;unittest&lt;/code&gt;是&lt;code&gt;python&lt;/code&gt;自带的标准库之一，是&lt;code&gt;python&lt;/code&gt;版的&lt;code&gt;junit&lt;/code&gt;，主要用于维护执行自动化测试框架的用例。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记" scheme="/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
      <category term="unittest" scheme="/tags/unittest/"/>
    
  </entry>
  
  <entry>
    <title>【Python】三方模块requests入门应用</title>
    <link href="/2019/04/17/python-module-requests/"/>
    <id>/2019/04/17/python-module-requests/</id>
    <published>2019-04-17T05:47:08.000Z</published>
    <updated>2019-08-25T06:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于<code>python3.7</code>及第三方模块<code>requests</code>编写入门级简易模式的HTTP请求应用于详解。<br><code>requests</code>是由python编写,基于urllib, 采用Apache2 Licensed开源协议的HTTP三方模块。详情应用见<a href="http://docs.python-requests.org/zh_CN/latest/index.html" target="_blank" rel="noopener">官网</a></p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><ol><li>如果已安装Anaconda，默认是含<code>requests</code>模块。</li><li>终端命令行安装，<a href="http://docs.python-requests.org/zh_CN/latest/user/install.html#install" target="_blank" rel="noopener">详情</a> <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> requests</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">from requests.auth <span class="keyword">import</span> AuthBase</span><br><span class="line"></span><br><span class="line">domain = 'http:<span class="comment">//httpbin.org'</span></span><br></pre></td></tr></table></figure><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">res</span> = requests.<span class="built_in">get</span>(domain + <span class="string">'/get'</span>, params=&#123;<span class="string">'aa'</span>: <span class="number">1</span>, <span class="string">'bb'</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.status_code, <span class="keyword">res</span>.text)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.url, <span class="keyword">res</span>.json())</span><br></pre></td></tr></table></figure><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">res</span> = requests.post(domain + <span class="string">'/post'</span>, params=&#123;<span class="string">'aa'</span>: <span class="number">11</span>, <span class="string">'bb'</span>: <span class="number">22</span>&#125;, data=&#123;<span class="string">'username'</span>: <span class="string">'bayuefen'</span>, <span class="string">'password'</span>: <span class="string">'123456'</span>&#125;)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.status_code, <span class="keyword">res</span>.text)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.url, <span class="keyword">res</span>.json())</span><br></pre></td></tr></table></figure><h4 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = requests.patch(domain + <span class="string">'/patch'</span>, data=&#123;<span class="string">'username'</span>:<span class="string">'bayuefen'</span>,<span class="string">'password'</span>:<span class="string">'123456'</span>,<span class="string">'visibility'</span>:<span class="string">'private'</span>&#125;)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(res.status_code, res.text)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(res.headers)</span></span></span><br></pre></td></tr></table></figure><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">res</span> = requests.<span class="keyword">delete</span>(domain + <span class="string">'/delete'</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.status_code, <span class="keyword">res</span>.text)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.headers)</span><br></pre></td></tr></table></figure><h4 id="Session-⭐️⭐️⭐️"><a href="#Session-⭐️⭐️⭐️" class="headerlink" title="Session (⭐️⭐️⭐️)"></a>Session (⭐️⭐️⭐️)</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rs = requests.Session()</span><br><span class="line">rs.<span class="built_in">get</span>(domain + <span class="string">'/cookies/set/username/bayuefen'</span>)</span><br><span class="line"><span class="keyword">res</span> = rs.<span class="built_in">get</span>(domain + <span class="string">'/cookies'</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.text)</span><br></pre></td></tr></table></figure><blockquote><p>1.Session对象能够跨请求保持某些特定参数，并且同一个Session实例发出的所有请求之间保持cookie<br>2.对于同一个服务器发送多个请求，底层TCP连接可被重用，有显著的性能提升</p></blockquote><h4 id="Cookie-⭐️⭐️⭐️"><a href="#Cookie-⭐️⭐️⭐️" class="headerlink" title="Cookie  (⭐️⭐️⭐️)"></a>Cookie  (⭐️⭐️⭐️)</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cookies = dict(admin_token=<span class="string">'xxxxxxxxx'</span>)</span><br><span class="line"><span class="keyword">res</span> = requests.<span class="built_in">get</span>(domain + <span class="string">'/cookies/set'</span>, cookies=cookies)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.text)</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jar = requests<span class="selector-class">.cookies</span><span class="selector-class">.RequestsCookieJar</span>()</span><br><span class="line">jar.set(<span class="string">'bayuefen_cookies'</span>, <span class="string">'123456'</span>, domain=<span class="string">'httpbin.org'</span>, path=<span class="string">'/cookies'</span>)</span><br><span class="line">jar.set(<span class="string">'bayuefen_values'</span>, <span class="string">'my_values'</span>, domain=<span class="string">'httpbin.org'</span>, path=<span class="string">'/elsewhere'</span>)</span><br><span class="line">res1 = requests.get(domain + <span class="string">'/cookies'</span>, cookies=jar)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(res1.text)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>Cookie的返回对象是RequestsCookieJar，这种模式适用于跨域名跨路径使用</p></blockquote><h4 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">res</span> = requests.<span class="built_in">get</span>(domain + <span class="string">'/redirect-to'</span>, params=&#123;<span class="string">'url'</span>:<span class="string">'https://www.baidu.com'</span>, <span class="string">'status_code'</span>:<span class="number">302</span>&#125;)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.url, <span class="keyword">res</span>.status_code)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.<span class="keyword">history</span>)</span><br></pre></td></tr></table></figure><blockquote><p>可配置allow_redirects = False 禁用重定向</p></blockquote><h4 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">res</span> = requests.<span class="built_in">get</span>(domain + <span class="string">'/get'</span>, timeout=<span class="number">0.001</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.raise_for_status())</span><br></pre></td></tr></table></figure><blockquote><p>超时的异常触发仅仅针对连接过程，与相应体的下载无关，即请求发起至服务器相应的最大时间，超过则以异常处理</p></blockquote><h4 id="file-upload"><a href="#file-upload" class="headerlink" title="file upload"></a>file upload</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">file</span> = &#123;<span class="string">'txtFile'</span>: <span class="keyword">open</span>(<span class="string">'./test.txt'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line">upload_data = &#123;<span class="string">"parentId"</span>: <span class="string">""</span>, <span class="string">"fileCategory"</span>: <span class="string">"personal"</span>, <span class="string">"fileSize"</span>: <span class="number">179</span>, <span class="string">"fileName"</span>: <span class="string">"test.txt"</span>, <span class="string">"uoType"</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">res</span> = requests.post(domain + <span class="string">'/post'</span>, upload_data, <span class="keyword">files</span>=<span class="keyword">file</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.url, <span class="keyword">res</span>.status_code)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.json())</span><br></pre></td></tr></table></figure><blockquote><p>超大文件的传输使用multipart/form-data，默认情况下requests是不支持的，需要使用requests-toolbelt</p></blockquote><h4 id="file-download"><a href="#file-download" class="headerlink" title="file download"></a>file download</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">res</span> = requests.<span class="built_in">get</span>(domain + <span class="string">'/image/jpeg'</span>, stream=True)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.raw, <span class="keyword">res</span>.raw.<span class="keyword">read</span>(<span class="number">10</span>))</span><br><span class="line">with <span class="keyword">open</span>(<span class="string">'./test.jpeg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    <span class="keyword">f</span>.<span class="keyword">write</span>(<span class="keyword">res</span>.content)</span><br></pre></td></tr></table></figure><blockquote><p>notice: 下载原始相应内容（images/xlsx/pdf等），通过设置stream获取raw</p></blockquote><h4 id="JSON解码器"><a href="#JSON解码器" class="headerlink" title="JSON解码器"></a>JSON解码器</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">res</span> = requests.post(domain + <span class="string">'/post'</span>, data=&#123;<span class="string">'aa'</span>: <span class="number">11</span>, <span class="string">'bb'</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.raise_for_status(), <span class="keyword">res</span>.status_code)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">res</span>.json()</span><br><span class="line">except ValueError:</span><br><span class="line">    logging.error(<span class="string">'No JSON object could be decoded'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>JSON被解码返回成功，不一定代表HTTP相应成功；检查请求响应是否成功，需通过<code>response.raise_for_status()</code> or <code>response.status_code</code>去判别</p></blockquote><h4 id="定制-headers"><a href="#定制-headers" class="headerlink" title="定制 headers"></a>定制 headers</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">res</span> = requests.<span class="built_in">get</span>(domain + <span class="string">'/get'</span>, headers=headers)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.json())</span><br><span class="line"># 响应头</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.headers.<span class="built_in">get</span>(<span class="string">'content-type'</span>))</span><br></pre></td></tr></table></figure><blockquote><p>定制headers低于特定场景的信息源</p><ol><li>如果在 .netrc 中设置了用户认证信息，使用 headers= 设置的授权就不会生效。而如果设置了 auth= 参数，<code>.netrc</code> 的设置就无效了。</li><li>如果被重定向到别的主机，授权 header 就会被删除。</li><li>代理授权 header 会被 URL 中提供的代理身份覆盖掉。</li><li>在我们能判断内容长度的情况下，header 的 Content-Length 会被改写。</li></ol></blockquote><h4 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(<span class="symbol">'https</span>://github.com', verify=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="流式请求"><a href="#流式请求" class="headerlink" title="流式请求"></a>流式请求</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">res</span> = requests.<span class="built_in">get</span>(domain + <span class="string">'/stream/20'</span>, stream=True)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>.raw)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">res</span>.encoding <span class="keyword">is</span> None:</span><br><span class="line">    <span class="keyword">res</span>.encoding = <span class="string">'utf-8'</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">line</span> in <span class="keyword">res</span>.iter_lines():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">line</span>:</span><br><span class="line">        decoded_line = <span class="built_in">line</span>.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">print</span>(json.loads(decoded_line))</span><br></pre></td></tr></table></figure><h4 id="Auth-HTTP基本身份认证"><a href="#Auth-HTTP基本身份认证" class="headerlink" title="Auth HTTP基本身份认证"></a>Auth HTTP基本身份认证</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auth = requests<span class="selector-class">.auth</span><span class="selector-class">.HTTPBasicAuth</span>(<span class="string">'user'</span>, <span class="string">'passwd'</span>)</span><br><span class="line">res = requests.get(domain + <span class="string">'/hidden-basic-auth/user/passwd'</span>, auth=auth)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(res.json()</span></span>)</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.<a href="http://docs.python-requests.org/zh_CN/latest/index.html#" target="_blank" rel="noopener">Requests: 让 HTTP 服务人类</a><br>2.<a href="http://httpbin.org/" target="_blank" rel="noopener">httpbin</a><br>3.<a href="https://github.com/bayuefen/demos/blob/master/requestDemo/test.py" target="_blank" rel="noopener">code</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文基于&lt;code&gt;python3.7&lt;/code&gt;及第三方模块&lt;code&gt;requests&lt;/code&gt;编写入门级简易模式的HTTP请求应用于详解。&lt;br&gt;&lt;code&gt;requests&lt;/code&gt;是由python编写,基于urllib, 采用Apache2 Licensed开源协议的HTTP三方模块。详情应用见&lt;a href=&quot;http://docs.python-requests.org/zh_CN/latest/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记" scheme="/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
      <category term="requests" scheme="/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>【HTTP】http协议学习</title>
    <link href="/2019/04/09/http-learn-notes/"/>
    <id>/2019/04/09/http-learn-notes/</id>
    <published>2019-04-09T14:08:32.000Z</published>
    <updated>2019-08-25T06:35:47.232Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p>HTTP协议是客户端和 服务器端之间数据传输的格式规范，格式简称为“超文本传输协议”全称为“Hyper Text Transfer Protocol”。</p><a id="more"></a><h3 id="HTTP协议历史版本"><a href="#HTTP协议历史版本" class="headerlink" title="HTTP协议历史版本"></a>HTTP协议历史版本</h3><ul><li><code>HTTP 1.0</code>： 默认是基于短连接，即非持久连接，采用文本数据格式传输；单个tcp连接仅能维护传输单个Web对象。<blockquote><p>无host域</p></blockquote></li></ul><p><br></p><ul><li><code>HTTP 1.1</code>： 默认是基于长连接，即持久连接（可配置成非持久连接），采用文本数据格式传输；单个tcp连接可以维护多个Web对象的传输。<blockquote><p>HTTP 1.1可获取host域这个参数。<br>长连接可有效减少TCP三次握手四次挥手的网络连接性能开销。<br>HTTP 1.1支持只发送header信息，不带任何body信息。可以校验B/S架构模式下，Browser是否具有访问请求权限，有则返回<code>status: 100</code>，无则返回<code>status: 401</code>，从而再依返回结果将请求的body信息发送给服务器，节约网络带宽。<br>HTTP 1.1同时也支持资源加载的断点续传。<br>同一时间对于同一域名，请求数量有限制，超过限制会造成网络阻塞请求。</p></blockquote></li></ul><p><br></p><ul><li><code>HTTP 2.0</code>： 采用二进制数据格式传输；实现多路复用；进行头部压缩优化。<a href="https://http2.akamai.com/demo" target="_blank" rel="noopener">HTTP1.1与HTTP2.0区别Demo</a><blockquote><p>⭐️ HTTP 2.0采用<em>多路复用（Multiplexing）</em> 用以解决<em>线头阻塞</em> 的问题。核心基于Google公司开发的基于TCP的应用层协议<a href="https://zh.wikipedia.org/wiki/SPDY" target="_blank" rel="noopener">SPDY非标准协议</a><br>⭐️ 增加”二进制分帧层”实现底层tcp多路复用。将多个请求在同一个TCP连接上完成，承载任意数量的双向数据流。极大的提升了传输层通信性能。<br>HTTP 2.0采用首部压缩设计的<a href="http://http2.github.io/http2-spec/compression.html" target="_blank" rel="noopener">HPACK</a>算法<br>HTTP 2.0的Server Push以及缓存策略</p></blockquote></li></ul><p><br></p><ul><li><code>HTTP 3.0</code>:  核心基于UDP传输层协议的<a href="https://zhuanlan.zhihu.com/p/32553477" target="_blank" rel="noopener">QUIC协议</a>;提供数据传输的高可靠性及0-RTT延迟；彻底解决<em>线头阻塞</em> <blockquote><p>基于UDP传输层协议，实现高速及高可靠性的数据传输。<br>彻底解决http1.1遗留的线头阻塞（HOL），实现不同流的数据传输相互独立传输，互不干扰。<br>0-RTT，不必像TCP那样需要三次握手。<br>参考：<br>  <a href="https://www.jianshu.com/p/bb3eeb36b479" target="_blank" rel="noopener">QUIC协议浅析与HTTP/3.0</a><br>  <a href="https://www.zhihu.com/question/302412059/answer/533223530" target="_blank" rel="noopener">如何看待 HTTP/3 ？</a></p></blockquote><h3 id="HTTP-2协议"><a href="#HTTP-2协议" class="headerlink" title="HTTP/2协议"></a>HTTP/2协议</h3>1、二进制分帧层 (Binary Framing Layer)<br>2、在单个TCP连接里多路复用请求。<br>3、HTTP/2的Server Push，非常重要的一个特性。<br>4、HTTP Header的压缩，采用的是HPack算法。<br>5、应用层的重置连接<br>6、请求优先级设置<br>7、流量控制<br>8、HTTP/1 的几种优化可以弃用<br>参考：<a href="https://blog.wangriyu.wang/2018/05-HTTP2.html" target="_blank" rel="noopener">https://blog.wangriyu.wang/2018/05-HTTP2.html</a></li></ul><h3 id="HTTP协议在OSI模型的位置"><a href="#HTTP协议在OSI模型的位置" class="headerlink" title="HTTP协议在OSI模型的位置"></a>HTTP协议在OSI模型的位置</h3><p>HTTP协议位于应用层</p><p><image src="https://bayuefen.oss-cn-hangzhou.aliyuncs.com/blog/20190406164742398.png?x-oss-process=style/compress_high" width="600" align="center"></image></p><h3 id="HTTP协议的method"><a href="#HTTP协议的method" class="headerlink" title="HTTP协议的method"></a>HTTP协议的method</h3><p>GET：请求一个指定资源的表示形式. 使用GET的请求应该只被用于获取数据.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.get(<span class="string">'https://api.github.com/events'</span>)</span><br></pre></td></tr></table></figure><p>HEAD：请求一个与GET请求的响应相同的响应，但没有响应体.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.head(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><p>POST：用于将实体提交到指定的资源，通常导致状态或服务器上的副作用的更改.<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.post(<span class="string">'http://httpbin.org/post'</span>, data = &#123;<span class="string">'key'</span><span class="symbol">:<span class="string">'value'</span></span>&#125;)</span><br></pre></td></tr></table></figure></p><p>PUT：用请求有效载荷替换目标资源的所有当前表示。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.put(<span class="string">'http://httpbin.org/put'</span>, data = &#123;<span class="string">'key'</span><span class="symbol">:<span class="string">'value'</span></span>&#125;)</span><br></pre></td></tr></table></figure><p>DELETE：删除指定的资源。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.delete(<span class="string">'http://httpbin.org/delete'</span>)</span><br></pre></td></tr></table></figure><p>CONNECT：建立一个到由目标资源标识的服务器的隧道。</p><p>OPTIONS：用于描述目标资源的通信选项。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.options(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><p>TRACE：沿着到目标资源的路径执行一个消息环回测试。</p><p>PATCH：用于对资源应用部分修改。</p><p>GET和POST对比：<br>GET<br>1.方法用途<br>GET 方法的首要目的是 获取资源</p><p>2.方法特点<br>a) 参数可见<br>GET 方法的参数是明文可见的包含在 URL 当中，所以说敏感信息不建议使用 GET 方法<br>不过也正是因此，所以 GET 方法允许被保存书签</p><p>b) 数据类型只允许 ASCII<br>GET 方法的数据类型只允许是 ASCII 字符，所以说传递 二进制 文件就不可以用 GET 方法了哦</p><p>c) 可以保存书签<br>当我们访问某一个网站的频率特别高的时候，肯定添加到书签，那其实书签就是依靠 GET 方法来保存的</p><p>d) 可以被缓存<br>GET 方法支持缓存，当本次请求允许被缓存时，会将资源存值本地 cache ，在未过期的情况下直接取本地 cache；缓存过期后视情况而定</p><p>e) 参数会保留在浏览器历史记录<br>比较直观的感受就是，我们可以在浏览器的历史记录中查看到曾经搜索过的关键字信息</p><p>f) 请求长度会受限于所使用的浏览器与服务器<br>不同的浏览器对于 GET 请求长度的限制也是不同的，注意这是 浏览器 / 服务器（IE、Chrome、Apache、IIS等） 对于长度的限制，而不是 HTTP 协议</p><p>POST<br>1.方法用途<br>POST 方法的首要目的是 提交，POST 方法一般用于添加资源</p><p>2.方法特点<br>a) 参数不可见，也不会被保存<br>所以说 POST 方法是不可以被保存书签的</p><p>b) 不能收藏为书签<br>理由如上</p><p>c) 不可以被缓存<br>我要提交的数据被缓存在本地 cache 中想想其实也是没道理的</p><p>d) 不会被保存在浏览器历史中<br>同样是因为参数不可见</p><p>e) 不限制请求长度<br>对于 POST 方法这种以 提交 为首要目的的方法，肯定是不可以限制请求长度的</p><p>f) 数据类型<br>不限，所以说 POST 是可以 提交文件 到服务器的</p><p>g) 请求方式<br>POST 请求与 GET 请求不同，他会首先提交 HEAD 信息，待得到 100 响应后，才会再次将 DATA 提交</p><h3 id="HTTP协议的组成"><a href="#HTTP协议的组成" class="headerlink" title="HTTP协议的组成"></a>HTTP协议的组成</h3><p>请求报文包含三部分：<br><strong>·</strong>请求行(Request line)：包含请求方法、URI、HTTP版本信息<br><strong>·</strong>请求首部字段(Request header)<br><strong>·</strong>请求内容实体<br>响应报文包含三部分：（以豆瓣电影TOP250为例）</p><blockquote><p>Request Headers</p></blockquote><blockquote><p>GET /top250 HTTP/1.1<br>#GET表示一个读取请求，将从服务器获得网页数据，/表示URL的路径，URL总是以/开头，/就表示首页，最后的HTTP/1.1指示采用的HTTP协议版本是1.1。<br>Host: movie.douban.com<br>#表示请求的域名是movie.douban.com<br>Connection: keep-alive<br>#表示支持长连接<br>Cache-Control: max-age=0<br>#指定请求和响应遵循的缓存机制<br>Upgrade-Insecure-Requests: 1<br>#浏览器可以处理https协议<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36<br>#发出请求的用户信息<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,<em>/</em>;q=0.8,application/signed-exchange;v=b3<br>#客户端希望接受的数据类型<br>Accept-Encoding: gzip, deflate, br<br>#浏览器发给服务器,声明浏览器支持的编码类型<br>Accept-Language: zh-CN,zh;q=0.9<br>#浏览器支持的语言分别是简体中文和中文，优先支持简体中文。<br>Cookie: bid=ZbyUzrJdS2w; <strong>utmc=30149280; </strong>utmc=223695111; <strong>yadk_uid=nTiBvU6fTOaXD90dB6edYhp8urhJwCjc; viewed=”27599884”; gr_user_id=4aa3ad30-748f-488c-b5b3-bcff3f0456d4; douban-fav-remind=1; ll=”118172”; _vwo_uuid_v2=DE51C937E99B505F3A54AE46B8619B83A|80d039133d473653fabc07636080bbb8; push_noty_num=0; push_doumail_num=0; </strong>utmv=30149280.19454; ap_v=0,6.0; _pk_ref.100001.4cf6=%5B%22%22%2C%22%22%2C1554617137%2C%22https%3A%2F%2Fwww.<br>baidu.com%2Flink%3Furl%3Dt8BO_5f8zl_78xcE_dnmyhd_1xbKVsXtXZv_yHxp72UVO88nbOSLQSA1xMPpsfX2%26wd%3<br>D%26eqid%3Da8c4f714000c0677000000035ca9932e%22%5D;<br> _pk_id.100001.4cf6=e94317b751ae8229.1554384156.13.1554617137.1554583408.; _pk_ses.100001.4cf6=*; <strong>utma=30149280.106710662.1554384144.1554583409.1554617137.12; </strong>utmb=30149280.0.10.1554617137; <strong>utmz=30149280.1554617137.12.6.utmcsr=baidu|utmccn=(organic)|utmcmd=organic; </strong>utma=223695111.1166551075.1554384156.1554583409.1554617137.13; <strong>utmb=223695111.0.10.1554617137; </strong>utmz=223695111.1554617137.13.6.utmcsr=baidu|utmccn=(organic)|utmcmd=organic<br>#http是无状态的，所以引入了cookie来管理服务器与客户端之间的状态</p></blockquote><p>响应报文包含三部分：<br><strong>·</strong>状态行：包含HTTP版本、状态码、状态码的原因短语<br><strong>·</strong>响应首部字段<br><strong>·</strong>响应内容实体</p><blockquote><p>Response header</p></blockquote><blockquote><p>HTTP/1.1 200 OK<br>#响应状态<br>Date: Sun, 07 Apr 2019 06:05:45 GMT<br>#生成消息的具体时间和日期<br>Content-Type: text/html; charset=utf-8<br>#服务器发送 html 文档，字符集为 UTF-8<br>Transfer-Encoding: chunked<br>Connection: keep-alive<br>Keep-Alive: timeout=30<br>Vary: Accept-Encoding<br>#服务器响应时根据请求头中的的值返回不同的内容<br>X-Xss-Protection: 1; mode=block<br>设置浏览器的XSS防护机制，浏览器如果检测到恶意代码，则不渲染恶意代码<br>X-Douban-Mobileapp: 0<br>Expires: Sun, 1 Jan 2006 01:00:00 GMT<br>浏览器会在指定过期时间内使用本地缓存<br>Pragma: no-cache<br>Cache-Control: must-revalidate, no-cache, private<br>X-DAE-Node: brand4<br>X-DAE-App: movie<br>Server: dae<br>X-Content-Type-Options: nosniff<br>Content-Encoding: gzip<br>文档使用的 MIME 类型是 text/html，并且对内容进行了 gzip 压缩</p></blockquote><h3 id="HTTP协议的状态码"><a href="#HTTP协议的状态码" class="headerlink" title="HTTP协议的状态码"></a>HTTP协议的状态码</h3><p>1xx（临时响应）表示临时响应并需要请求者继续执行操作的状态代码。<br>2xx （成功） 表示成功处理了请求的状态代码。<br>3xx （重定向） 表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。<br>4xx（请求错误） 这些状态代码表示请求可能出错，妨碍了服务器的处理。<br>5xx（服务器错误） 这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。<br>常见的：200 – 服务器成功返回网页 |404 – 请求的网页不存在 |503 – 服务不可用 </p><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:center">中文描述 </th></tr></thead><tbody><tr><td style="text-align:center">100</td><td style="text-align:center">（继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。  </td></tr><tr><td style="text-align:center">101</td><td style="text-align:center">（切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。</td></tr><tr><td style="text-align:center">102</td><td style="text-align:center">（已接受）已经接受请求，但未处理完成</td></tr><tr><td style="text-align:center">200</td><td style="text-align:center">（成功）  服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。</td></tr><tr><td style="text-align:center">201</td><td style="text-align:center">（已创建）  请求成功并且服务器创建了新的资源。</td></tr><tr><td style="text-align:center">202</td><td style="text-align:center">（已接受）  服务器已接受请求，但尚未处理。</td></tr><tr><td style="text-align:center">203</td><td style="text-align:center">（非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。</td></tr><tr><td style="text-align:center">204</td><td style="text-align:center">（无内容）  服务器成功处理了请求，但没有返回任何内容。</td></tr><tr><td style="text-align:center">205</td><td style="text-align:center">（重置内容） 服务器成功处理了请求，但没有返回任何内容。 </td></tr><tr><td style="text-align:center">206</td><td style="text-align:center">（部分内容）  服务器成功处理了部分 GET 请求。</td></tr><tr><td style="text-align:center">300</td><td style="text-align:center">（多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。 </td></tr><tr><td style="text-align:center">301</td><td style="text-align:center">（永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</td></tr><tr><td style="text-align:center">302</td><td style="text-align:center">（临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td></tr><tr><td style="text-align:center">303</td><td style="text-align:center">（查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</td></tr><tr><td style="text-align:center">304</td><td style="text-align:center">（未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。 </td></tr><tr><td style="text-align:center">305</td><td style="text-align:center">（使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</td></tr><tr><td style="text-align:center">307</td><td style="text-align:center">（临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td></tr><tr><td style="text-align:center">400</td><td style="text-align:center">（错误请求） 服务器不理解请求的语法。</td></tr><tr><td style="text-align:center">401</td><td style="text-align:center">未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。 </td></tr><tr><td style="text-align:center">403</td><td style="text-align:center">（禁止） 服务器拒绝请求。 </td></tr><tr><td style="text-align:center">404</td><td style="text-align:center">（未找到） 服务器找不到请求的网页。 </td></tr><tr><td style="text-align:center">405</td><td style="text-align:center">（方法禁用） 禁用请求中指定的方法。</td></tr><tr><td style="text-align:center">406</td><td style="text-align:center">（不接受） 无法使用请求的内容特性响应请求的网页。 </td></tr><tr><td style="text-align:center">407</td><td style="text-align:center">（需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</td></tr><tr><td style="text-align:center">408</td><td style="text-align:center">（请求超时）  服务器等候请求时发生超时。 </td></tr><tr><td style="text-align:center">409</td><td style="text-align:center">（冲突）  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。 </td></tr><tr><td style="text-align:center">410</td><td style="text-align:center">（已删除）  如果请求的资源已永久删除，服务器就会返回此响应。 </td></tr><tr><td style="text-align:center">411</td><td style="text-align:center">（需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。 </td></tr><tr><td style="text-align:center">412</td><td style="text-align:center">（未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。 </td></tr><tr><td style="text-align:center">413</td><td style="text-align:center">（请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。 </td></tr><tr><td style="text-align:center">414</td><td style="text-align:center">（请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。 </td></tr><tr><td style="text-align:center">415</td><td style="text-align:center">（不支持的媒体类型） 请求的格式不受请求页面的支持。 </td></tr><tr><td style="text-align:center">416</td><td style="text-align:center">（请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。 </td></tr><tr><td style="text-align:center">417</td><td style="text-align:center">（未满足期望值） 服务器未满足”期望”请求标头字段的要求。</td></tr><tr><td style="text-align:center">500</td><td style="text-align:center">（服务器内部错误）  服务器遇到错误，无法完成请求。 </td></tr><tr><td style="text-align:center">501</td><td style="text-align:center">（尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</td></tr><tr><td style="text-align:center">502</td><td style="text-align:center">（错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</td></tr><tr><td style="text-align:center">503</td><td style="text-align:center">（服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。 </td></tr><tr><td style="text-align:center">504</td><td style="text-align:center">（网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。 </td></tr><tr><td style="text-align:center">505</td><td style="text-align:center">（HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</td></tr></tbody></table><h3 id="cookies和会话"><a href="#cookies和会话" class="headerlink" title="cookies和会话"></a>cookies和会话</h3><p>因为HTTP是无状态的，对事物处理没有记忆能力。cookies和会话出现用于保持HTTP连接状态，<br>会话在服务端，用来保存用户的会话信息；cookies在客户端，浏览器下次访问网页时会自动附带上它发送给服务器，<br>服务器通过识别cookies找到对应的会话判断用户状态。<br>PS:关闭浏览器不会导致会话被删除，反而没有存储到硬盘上的cookie会消失，因此为了节省存储空间需要为会话设置一个失效时间。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTTP协议&quot;&gt;&lt;a href=&quot;#HTTP协议&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议&quot;&gt;&lt;/a&gt;HTTP协议&lt;/h3&gt;&lt;p&gt;HTTP协议是客户端和 服务器端之间数据传输的格式规范，格式简称为“超文本传输协议”全称为“Hyper Text Transfer Protocol”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记" scheme="/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="学习Vlog" scheme="/tags/%E5%AD%A6%E4%B9%A0Vlog/"/>
    
      <category term="HTTP" scheme="/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>辨析 Sass 中的 Map 和 List</title>
    <link href="/2015/10/21/demo/"/>
    <id>/2015/10/21/demo/</id>
    <published>2015-10-21T02:34:12.000Z</published>
    <updated>2019-08-25T06:35:47.231Z</updated>
    
    <content type="html"><![CDATA[<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p><p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p><p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p><a id="more"></a><p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p><h2 id="测试表格"><a href="#测试表格" class="headerlink" title="测试表格"></a>测试表格</h2><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><code>site</code></td><td>Sitewide information.</td></tr><tr><td><code>page</code></td><td>Page specific information and custom variables set in front-matter.</td></tr><tr><td><code>config</code></td><td>Site configuration</td></tr><tr><td><code>theme</code></td><td>Theme configuration. Inherits from site configuration.</td></tr><tr><td><code>_</code> (single underscore)</td><td><a href="http://lodash.com/" target="_blank" rel="noopener">Lodash</a> library</td></tr><tr><td><code>path</code></td><td>Path of current page</td></tr><tr><td><code>url</code></td><td>Full URL of current page</td></tr><tr><td><code>env</code></td><td>Environment variables</td></tr></tbody></table><h2 id="语法比较"><a href="#语法比较" class="headerlink" title="语法比较"></a>语法比较</h2><div class="note"><br>    <h5>测试标题</h5><br>    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 <code>min-width</code>、<code>max-width</code>、<code>font-size</code> 和 <code>line-height</code> 四个样式。</p><br></div><h4 id="Map-语法"><a href="#Map-语法" class="headerlink" title="Map 语法"></a>Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-map: (</span><br><span class="line">    small: (</span><br><span class="line">        min-width: null,</span><br><span class="line">        max-width: 479px,</span><br><span class="line">        base-font: 16px,</span><br><span class="line">        vertical-rhythm: 1.3</span><br><span class="line">    ),</span><br><span class="line">    medium: (</span><br><span class="line">        min-width: 480px,</span><br><span class="line">        max-width: 959px,</span><br><span class="line">        base-font: 18px,</span><br><span class="line">        vertical-rhythm: 1.414</span><br><span class="line">    ),</span><br><span class="line">    large: (</span><br><span class="line">        min-width: 960px,</span><br><span class="line">        max-width: 1099px,</span><br><span class="line">        base-font: 18px,</span><br><span class="line">        vertical-rhythm: 1.5</span><br><span class="line">    ),</span><br><span class="line">    xlarge: (</span><br><span class="line">        min-width: 1100px,</span><br><span class="line">        max-width: null,</span><br><span class="line">        base-font: 21px,</span><br><span class="line">        vertical-rhythm: 1.618</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="多重列表语法"><a href="#多重列表语法" class="headerlink" title="多重列表语法"></a>多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (</span><br><span class="line">    (small, null, 479px, 16px, 1.3),</span><br><span class="line">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class="line">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class="line">    (xlarge, 1100px, null, 21px, 1.618)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="遍历比较"><a href="#遍历比较" class="headerlink" title="遍历比较"></a>遍历比较</h2><div class="note info"><br>    <h5>测试标题</h5><br>    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p><br></div><h4 id="遍历-Map"><a href="#遍历-Map" class="headerlink" title="遍历 Map"></a>遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;&#125;</span><br></pre></td></tr></table></figure><p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p><p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;</span><br><span class="line">    $min-width: map-get($map, min-width);</span><br><span class="line">    $max-width: map-get($map, max-width);</span><br><span class="line">    $base-font: map-get($map, base-font);</span><br><span class="line">    $vertical-rhythm: map-get($map, vertical-rhythm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历多重列表"><a href="#遍历多重列表" class="headerlink" title="遍历多重列表"></a>遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p><p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="慎用多重列表"><a href="#慎用多重列表" class="headerlink" title="慎用多重列表"></a>慎用多重列表</h2><div class="note warning"><br>    <h5>测试标题</h5><br>    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p><br></div><h4 id="遗漏键值"><a href="#遗漏键值" class="headerlink" title="遗漏键值"></a>遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (</span><br><span class="line">    (small, null, 479px, 16px, 1.3),</span><br><span class="line">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class="line">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class="line">    (xlarge, 1100px, 21px, 1.618)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class="line">        @if $min-width &#123;</span><br><span class="line">            @include breakpoint( $min-width ) &#123;</span><br><span class="line">                font-size: $base-font;</span><br><span class="line">                line-height: $vertical-rhythm;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; @else &#123;</span><br><span class="line">            font-size: $base-font;</span><br><span class="line">            line-height: $vertical-rhythm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p><p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p><h4 id="查找特定列表"><a href="#查找特定列表" class="headerlink" title="查找特定列表"></a>查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$medium-map: map-get($maps, medium);</span><br></pre></td></tr></table></figure><p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@function get-list($label) &#123;</span><br><span class="line">    @each $list in $breakpoint-list &#123;</span><br><span class="line">        @if nth($list, 1) == $label &#123;</span><br><span class="line">            @return $list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @return null;</span><br><span class="line">&#125;</span><br><span class="line">$medium-list: get-list(medium);</span><br></pre></td></tr></table></figure><p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p><h4 id="缺少原生的-Map-函数"><a href="#缺少原生的-Map-函数" class="headerlink" title="缺少原生的 Map 函数"></a>缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p><p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div class="note unreleased"><br>    <h5>Test Title</h5><br>    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p><br></div><p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。&lt;/p&gt;
&lt;p&gt;自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。&lt;/p&gt;
&lt;p&gt;那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 &lt;code&gt;package.json&lt;/code&gt; 或者其他同类型的项目配置文件所控制，往往只需一条命令（&lt;code&gt;gem update sass&lt;/code&gt;）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="/tags/css/"/>
    
  </entry>
  
</feed>
